using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace AnimalLib
{
    /// <summary>
    /// Абстрактный класс Животное.
    /// Экземпляр абстрактного класса создать нельзя.
    /// Абстрактные классы используются только как базовые классы.
    /// Т.к. не указан базовый класс, базовым будет класс System.Object
    /// </summary>
    public abstract class Animal
    {
        /// <summary>
        /// В этом поле будет посчитываться, сколько животных создано в программе.
        /// Статичные поля хранятся в классе и доступны для всех экземпляров.
        /// </summary>
        public static int Count = 0;

        /// <summary>
        /// Конструктор животного.
        /// В наследных классах его необходимо вызвать.
        /// </summary>
        /// <param name="name"></param>
        /// <param name="birthday"></param>
        public Animal(string name, DateTime birthday)
        {
            Name = name;
            _birthday = birthday;
            Count++;
        }

        /// <summary>
        /// День рождения животного.
        /// Открываем доступ к полю для наследных классов.
        /// Модификатор readonly указывает, что задать значение можно только в конструкторе класса.
        /// Попытка изменить значение поля за пределами конструктора вызовет ошибку компиляции.
        /// </summary>
        protected readonly DateTime _birthday;

        /// <summary>
        /// Имя животного.
        /// Запрещаем изменять его за пределами класса Animal.
        /// </summary>
        public string Name { get; private set; }
        public Toy FavouriteToy { get; set; }

        /// <summary>
        /// Возраст животного в минутах.
        /// Вычисляемое поле - значение нигде не хранится, вычисляется при каждом обращении.
        /// </summary>
        public double Age
        {
            get
            {
                return (DateTime.Now - _birthday).TotalMinutes;
            }
        }

        /// <summary>
        /// Укусить.
        /// Закрытый конкретный метод.
        /// Этот метод не является ни виртуальным, ни абстрактным.
        /// Мы не можем изменить логику этого метода в наследном классе.
        /// </summary>
        protected void Bite()
        {
            Console.WriteLine(Name + " кусает");
        }

        /// <summary>
        /// Погладить.
        /// Публичный абстрактный метод.
        /// Абстрактный метод может быть объявлен только в абстрактном классе.
        /// Абстрактный метод не содержит реализации, только определение.
        /// Абстрактный метод необходимо реализовать в наследном классе, если наследный класс сам не абстрактный.
        /// </summary>
        public abstract void Pet();

        /// <summary>
        /// Что ты говоришь?
        /// Публичный виртуальный метод.
        /// Содержит логику, общую для всех наследников.
        /// Логику виртуального класса можно переопределить в наследнике, но это делать не обязательно.
        /// ВАЖНО: если в наследнике переопределяется логика, то базовая логика не вызывается автоматически, но ее можно вызвать вручную.
        /// </summary>
        /// <returns></returns>
        public virtual string WhatYouSay()
        {
            return "...";
        }
    }
}
